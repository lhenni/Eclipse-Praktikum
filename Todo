TODO:
# later:
* apply to pcm2java project
* maybe add additions to reactions generator/builder? (fluent builder)
* test if formatting works after rebase (if it doesn't, not that important)
* maybe add formatter entries for newly added elements
* optional: add tests related to changes
* optional: look into performance?
* update generated code for other projects inside vitruv
* get tests to pass
  * tests seem to run fine if started as plugin tests from within plugin eclipse instance
* error when auto complete on regular import -> check if this is also the case with the unmodified reactions language 


# now, safe:
* validation: when overriding routine, separate validation from matching name and matching parameters
  * so if name matches, but parameters don't, show expected parameters from the overridden routine with that name
    * currently it shows the current parameters of the override routine

* routine overridden path doesn't use scoping because it is a raw list..
  * ReactionsImportPath: Which one to use? Can the first one use scoping (instead of only content proposal)?
	* segments += ValidID ('.' segments += ValidID)*;
	* ValidID ('.' ValidID)*;
	* in the first case: 2 ReactionsImportPath classes: dslruntime and model element; both basically representing the same thing.. idea for other name for one of them?
	* maybe add dependency for xtext.naming package in dslruntime and use QualifiedName everywhere instead?
  -> done: overriddenImportPath is a List<String> of segments now, directly included in the routine (no separate type)
    * !!! doesn't use scoping..
	
  
# now, unsafe:

* suggest lower or upper case reactions segment names, similar to reactions and routines?
  * currently/now: warning if there is a reactions segment found with a matching name regardless of upper/lower case first character
  * duplicate named reactions segments can lead to conflicts: lower-case name is used for package names
	* use errors instead of warnings when finding similarly named reactions segment globally?
  * currently formatted reactions segments name returns upper-case variant: use lower-case?
    * lower case looks nicer for included routines facades, and is the one currently used for lots of reactions segments, and is used for the package name
	* Upper case looks similar to class names

* ReactionsLanguageUtil.getFormattedName: Really required to first use parsed name? Currently this might only be used by validator and by ui project inside OutlineTreeProvider

* overriding currently requires original reactions segment name: maybe somehow allow overriding of routines without qualified names (or partly qualified due to transitive qualified-name import)?
  * allow '::routineName' (no segment/path) for included routines?
    * only 'routineName' would lead to name clash, because it is no recognised as override
		* add 'override' keyword?

* Consider reactions import A->B->C
  * (regardless of if B overrides reaction of C)
  * A wants to override that reaction, should it have to use 'C::reaction' (current behavior), or 'B::reaction', or maybe '::reaction' ?
    * with B::reaction, A wouldn't need to know where the reaction originally came from
	  * 'inheritance behavior': the C reactions are considered to be part of B now from A's point of view
	* but: the behavior of the reactions of C depend on routines in C, which need to be overridden via C::routine anyways
	  * so in the end A has to know where which reaction comes from anyways
	* also: currently duplicate reaction names are allowed

* signature comparison: compare parameter types of routines directly, instead of string comparison?



# Questions:

  
---------


# optional:
* make import of routines-only the default, and require 'import reactions <segment>' when importing reactions AND routines?
* maybe associate routines facade fields with original segment? so open declaration opens the original segment with that name, and not the one overriding (importing) it
  * check if associations are required to keep that way, due to code generation relying on it to determine affected files?
* feature idea: allow specifying an import name/alias when importing using qualified names, and then allow duplicate imports, as long as the alias is different:
  * Would allow importing a reactions segment again to access its original routines, or use them with different overrides: B->A, B->A as A_original, or B->A as A2 and then different overrides A2::routine
* feature: possibility to call overridden routine/reaction from overriding routine/reaction
  * maybe via implicit routine called 'super' or 'base': super(), super(a, b, c)
  * provided additionally to the routinesFacade, via extension, inside the userExecution
  * But: what about override hierarchy?
    * currently the base routine/reaction gets overridden multiple times, and the override top-most in the import hierarchy gets used
    * should 'super'/'base' call the base overridden routine/reaction, or the next override routine one deeper in the override hierarchy
* allow omitting routine action?
  * useful when overriding a routine with the intent to 'disable' it
* allow 'empty' reaction (no trigger and no callRoutine):
  * useful when overriding a routine with the intent to 'disable' it

# Done:
* no cyclic imports: cannot import self directly or indirectly by importing another segment
* validation: check for name-clashes in included routines
* validation: check for name-clashes in included routines facades
* validation: check for duplicate imported reactions
* only generating classes for 'complete' reactions segments, reactions, routines

* routines facade state moved into separate class and shared by all facades in the same import hierarchy
  * easier cleanup of state after usage
  * less redundant state copied in all the different facades
  * the facades provider creates and stores the shared state and passes it to all the created facades
    * Alternative possible: Rename RoutinesFacadesProvider to RoutinesFacadesHierarchy (or similar) and let the facades request the execution state from it
	  * the provider has to create and store the state anyways already, would make this responsibility clearer..
	  
* routines don't need to set/capture/restore reaction execution state currently (only caller), but do it anways?
  * allows standalone creation and execution of routines, without a reaction previously having set the reaction execution state..
  * nothing limits routines to only being created by reactions currently..

# To test:
* validation: require same model pair when importing something
* validation: no override of non-existent reactions/routines (compare signatures for routines, names for reactions)
* language change: reactions names are no longer optional (required for overrides)
* language change: forbid routine names starting with _ to prevent name clashes with internal (not visible) methods of the routines facade
* default indexing doesn't index cross-refs that reference an object in the same resource: Problem?
  * TODO: test if the import hierarchy can be determined without issues with a transitive import pointing to a segment that is in the same resource as the imported segment
* TODO: properly test all specified behavior

# Tested:


ERRORS:

1) while typing reaction body:

reaction Base::CreateRootTest {
	after element minimal
}
* somehow related to label provider? .. we are using the default here

!ENTRY org.eclipse.jface 4 2 2018-01-30 17:19:59.714
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jface".
!STACK 0
java.lang.NullPointerException
	at org.eclipse.jface.viewers.DelegatingStyledCellLabelProvider.update(DelegatingStyledCellLabelProvider.java:107)
	at org.eclipse.jface.viewers.ViewerColumn.refresh(ViewerColumn.java:141)
	at org.eclipse.jface.viewers.AbstractTreeViewer.doUpdateItem(AbstractTreeViewer.java:946)
	at org.eclipse.jface.viewers.AbstractTreeViewer$UpdateItemSafeRunnable.run(AbstractTreeViewer.java:117)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.JFaceUtil.lambda$0(JFaceUtil.java:44)
	at org.eclipse.jface.util.SafeRunnable.run(SafeRunnable.java:173)
	at org.eclipse.jface.viewers.AbstractTreeViewer.doUpdateItem(AbstractTreeViewer.java:1025)
	at org.eclipse.jface.viewers.StructuredViewer$UpdateItemSafeRunnable.run(StructuredViewer.java:475)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.JFaceUtil.lambda$0(JFaceUtil.java:44)
	at org.eclipse.jface.util.SafeRunnable.run(SafeRunnable.java:173)
	at org.eclipse.jface.viewers.StructuredViewer.updateItem(StructuredViewer.java:2159)
	at org.eclipse.jface.viewers.AbstractTreeViewer.createTreeItem(AbstractTreeViewer.java:840)
	at org.eclipse.jface.viewers.AbstractTreeViewer.lambda$0(AbstractTreeViewer.java:817)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
	at org.eclipse.jface.viewers.AbstractTreeViewer.createChildren(AbstractTreeViewer.java:792)
	at org.eclipse.jface.viewers.TreeViewer.createChildren(TreeViewer.java:595)
	at org.eclipse.jface.viewers.AbstractTreeViewer.createChildren(AbstractTreeViewer.java:763)
	at org.eclipse.jface.viewers.AbstractTreeViewer.internalExpand(AbstractTreeViewer.java:1624)
	at org.eclipse.jface.viewers.AbstractTreeViewer.setSelectionToWidget(AbstractTreeViewer.java:2490)
	at org.eclipse.jface.viewers.StructuredViewer.setSelectionToWidget(StructuredViewer.java:1759)
	at org.eclipse.jface.viewers.AbstractTreeViewer.setSelectionToWidget(AbstractTreeViewer.java:2959)
	at org.eclipse.jface.viewers.StructuredViewer.setSelection(StructuredViewer.java:1715)
	at org.eclipse.jface.viewers.TreeViewer.setSelection(TreeViewer.java:1075)
	at org.eclipse.jface.viewers.Viewer.setSelection(Viewer.java:380)
	at org.eclipse.xtext.ui.editor.outline.actions.OutlineWithEditorLinker.selectInTreeView(OutlineWithEditorLinker.java:131)
	at org.eclipse.xtext.ui.editor.outline.actions.OutlineWithEditorLinker$TextListener.selectionChanged(OutlineWithEditorLinker.java:72)
	at org.eclipse.jface.text.TextViewer.firePostSelectionChanged(TextViewer.java:2628)
	at org.eclipse.jface.text.TextViewer.firePostSelectionChanged(TextViewer.java:2576)
	at org.eclipse.jface.text.TextViewer$5.run(TextViewer.java:2555)
	at org.eclipse.swt.widgets.Display.runTimer(Display.java:4341)
	at org.eclipse.swt.widgets.Display.messageProc(Display.java:3419)
	at org.eclipse.swt.internal.win32.OS.DispatchMessageW(Native Method)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(OS.java:2560)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3815)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1150)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:336)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1039)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:153)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:680)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:336)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:594)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:148)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:151)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:196)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:134)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:388)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:243)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:497)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:653)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:590)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1499)
	at org.eclipse.equinox.launcher.Main.main(Main.java:1472)
